pipeline {
    agent {
        label 'ubuntu'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn -B -DskipTests clean package'
                    } catch (Exception e) { // catch the error and send it to Gemini 
                        def errorMessage = e.getMessage()
                        def suggestion = getGeminiResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo "Suggestion from Gemini: ${suggestion}"
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch (Exception e) {
                        def errorMessage = e.getMessage()
                        def suggestion = getGeminiResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo "Suggestion from Gemini: ${suggestion}"
                    }
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                script {
                    try {
                        sh 'mvn deploy'
                    } catch (Exception e) {
                        def errorMessage = e.getMessage()
                        def suggestion = getGeminiResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo "Suggestion from Gemini: ${suggestion}"
                    }
                }
            }
        }
    }
}

def getGeminiResponse(errorMessage) { // function to send the error to Gemini through API call and recieve respons back 
    def apiKey = 'sk-o6sSqyn7HwQ3g0cTuDQgLA' 
    def response = sh(
        script: """
            curl -X POST https://litellm.vois-coe-dev-eks.coe-dev.tvois-vodafone.com/completions \\
                -H "Authorization: Bearer ${apiKey}" \\
                -H "Content-Type: application/json" \\
                -d '{
                    "model": "gemini-model",
                    "prompt": "Detect the cause of this error and suggest possible solutions: ${errorMessage}",
                    "max_tokens": 150
                }'
        """, returnStdout: true
    ).trim()
    
    def parsedResponse = readJSON(text: response)
    return parsedResponse.choices[0].text.trim()
}
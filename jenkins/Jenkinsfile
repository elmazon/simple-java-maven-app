pipeline {
    agent {
        label 'ubuntu'
    }

    stages {
        stage('Build') {
            steps {
                script {
                    try {
                        sh 'mvn -B -DskipTests clean package'
                    } catch (Exception e) { // catch the error and send it to LLM
                        def errorMessage = e.getMessage().replace('"', '\\"')
                        def suggestion = getLLMResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo "Suggestion from LLM:\n${suggestion}"
                        error("Build failed: ${error_message}")
                    }
                }
            }
        }
        stage('Test') {
            steps {
                script {
                    try {
                        sh 'mvn test'
                    } catch (Exception e) {
                        def errorMessage = e.getMessage()
                        def suggestion = getLLMResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo"Suggestion from LLM:\n${suggestion}"
                        error("Build failed: ${error_message}")
                    }
                }
            }
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                script {
                    try {
                        sh 'mvn deploy'
                    } catch (Exception e) {
                        def errorMessage = e.getMessage()
                        def suggestion = getLLMResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo"Suggestion from LLM:\n${suggestion}"
                        error("Build failed: ${error_message}")
                    }
                }
            }
        }
    }
}

def getLLMResponse(errorMessage) { // function to send the error to LLM through API call and recieve respons back 
    def apiKey = 'sk-o6sSqyn7HwQ3g0cTuDQgLA' 
    def response = sh(
        script: """
            set +x 
            curl -s -X POST https://litellm.vois-coe-dev-eks.coe-dev.tvois-vodafone.com/chat/completions \\
                -H "Authorization: Bearer ${apiKey}" \\
                -H "Content-Type: application/json" \\
                -d '{
                    "model": "gemini-pro",
                    "messages": [{"role":"user","content":"Detect the cause of this error and suggest possible solutions: ${errorMessage}"}]
                }'
        """, returnStdout: true
    ).trim()
    def jsonResponse = new groovy.json.JsonSlurper().parseText(response)
    def messageContent = jsonResponse.choices[0].message.content
    return messageContent

}

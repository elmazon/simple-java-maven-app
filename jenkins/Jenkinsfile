pipeline {
    /*agent {
        amazonEC2(
            region: 'us-east-1',
            filters: [
                instanceType: 't2.micro',  // Filter by instance type
                tag: 'Name: linux1' // Filter by tag
            ]
        )
    }
    agent { 
        try {
            label 'ubuntu'
            /*docker {
            image 'maven:3.9.0'
            args '-v /root/.m2:/root/.m2'
            }         
        } 
        catch (Exception e) { // when error is catched it is sent to Gemini
                        def errorMessage = e.getMessage()
                        def suggestion = getGeminiResponse(errorMessage)
                        echo "Error: ${errorMessage}"
                        echo "Suggestion from Gemini: ${suggestion}"    
        
        }
    } */
    agent {
        label 'ubuntu'
    }
    stages{
        stage('Build') {
            steps {
                scripts{
                    try {    
                        sh 'mvn -B -DskipTests clean package'
                    } 
                    catch (Exception e) { // when error is catched it is sent to Gemini
                            def errorMessage = e.getMessage()
                            def suggestion = getGeminiResponse(errorMessage)
                            echo "Error: ${errorMessage}"
                            echo "Suggestion from Gemini: ${suggestion}"    
                    }
                } 
                
            }
        }
        stage('Test') {
            steps {
                scripts{
                    try {    
                        sh 'mvn test'
                    } 
                    catch (Exception e) { // when error is catched it is sent to Gemini
                            def errorMessage = e.getMessage()
                            def suggestion = getGeminiResponse(errorMessage)
                            echo "Error: ${errorMessage}"
                            echo "Suggestion from Gemini: ${suggestion}"    
                    }
                } 
                
            }   
            post {
                always {
                    junit 'target/surefire-reports/*.xml'
                }
            }
        }
        stage('Deliver') {
            steps {
                scripts{
                    try {    
                        sh 'mvn test'
                    } 
                    catch (Exception e) { // when error is catched it is sent to Gemini
                            def errorMessage = e.getMessage()
                            def suggestion = getGeminiResponse(errorMessage)
                            echo "Error: ${errorMessage}"
                            echo "Suggestion from Gemini: ${suggestion}"    
                    }
                } 
            }
        }
    }
}
def getGeminiResponse(errorMessage) { // function to send the error to Gemini Through API Call
    def apiKey = 'sk-o6sSqyn7HwQ3g0cTuDQgLA' 
    def response = sh(
        script: 
            """
                curl -X POST https://litellm.vois-coe-dev-eks.coe-dev.tvois-vodafone.com/completions \\
                    -H "Authorization: Bearer ${apiKey}" \\
                    -H "Content-Type: application/json" \\
                    -d '{
                        "model": "gemini-model",
                        "prompt": "Detect the cause of this error and suggest possible solutions: ${errorMessage}",
                        "max_tokens": 150
                    }'
            """, returnStdout: true.trim()
    )
    
    def parsedResponse = readJSON(text: response)
    return parsedResponse.choices[0].text.trim()
}

